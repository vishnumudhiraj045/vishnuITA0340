Experiment:
alert =new Alert("Message",ex.toString(),null,AlertType.INFO);
alert.setTimeout(Alert.FOREVER);
display.setCurrent(alert);
}
}
else if(cmd==ExitCommand)
{
try
{
recordstore.closeRecordStore();
notifyDestroyed();
}
catch(Exception ex)
{
}
}
else if(cmd==sCommand)
{
try
{
byte[] bytes=new byte[300];
ByteArrayInputStream bstream=new ByteArrayInputStream(bytes);
DataInputStream dstream=new DataInputStream(bstream);
StringBuffer sb=new StringBuffer();
comp=new Compare();
re=recordstore.enumerateRecords(null, comp,false);
st1.setText("");
while(re.hasNextElement())
{
recordstore.getRecord(re.nextRecordId(), bytes, 0);
sb.append(dstream.readUTF()+"|"+dstream.readInt());
sb.append("\n");
dstream.reset();
}
bstream.close();
dstream.close();
st1.setText(sb.toString());
form7.append(st1);
}
catch(Exception ex)
{
alert =new Alert("Msg",ex.toString(),null,AlertType.INFO);
alert.setTimeout(Alert.FOREVER);
display.setCurrent(alert);
}
display.setCurrent(form7);
}
}
else if(displayable==form7)
{
if(cmd==backCommand)
display.setCurrent(form6);
} }}
Date Structures using C ++ B 2018-2019
Date Structures using C ++ LAB 201
Department of IT Page 27
MOBILE APPLICATION DEVELOPMENT LAB 2019-2020
class Compare implements RecordComparator
{
public byte[] bytedata=new byte[300];
public ByteArrayInputStream bstream=null;
public DataInputStream dstream=null;
public int compare(byte[] r1,byte[] r2)
{
int r1int,r2int;
int or=0;
try
{
int maxlen=Math.max(r1.length, r2.length);
if(maxlen>bytedata.length)
{
bytedata=new byte[maxlen];
}
bstream=new ByteArrayInputStream(r1);
dstream=new DataInputStream(bstream);
dstream.readUTF();
r1int=dstream.readInt();
bstream=new ByteArrayInputStream(r2);
dstream=new DataInputStream(bstream);
dstream.readUTF();
r2int=dstream.readInt();
if(r1int==r2int)
{
or= RecordComparator.EQUIVALENT;
}
else if(r1int>r2int)
{
or= RecordComparator.PRECEDES;
}
else if(r1int<r2int)
{
or= RecordComparator.FOLLOWS;
}
return or;
}
catch(Exception ex)
{
return RecordComparator.EQUIVALENT;
}
}
public void compareClose()
{
try
{
if(bstream!=null)
{
bstream.close();
}
if(dstream!=null)
{
dstream.close();
}
Date Structures using C ++ B 2018-2019
Date Structures using C ++ LAB 201
Department of IT Page 28
MOBILE APPLICATION DEVELOPMENT LAB 2019-2020
}
catch(Exception ex)
{
} }
}
Footer
© 2022 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contac